{"ast":null,"code":"var determineTheme = props => \"theme\" in props ? props.theme : props;\n\nexport function getIsRtl(props) {\n  var theme = determineTheme(props);\n  return theme.direction === TextDirection.rtl;\n}\nexport var TextDirection;\n\n(function (TextDirection) {\n  TextDirection[\"ltr\"] = \"ltr\";\n  TextDirection[\"rtl\"] = \"rtl\";\n})(TextDirection || (TextDirection = {}));\n\nfunction directionality(options) {\n  var theme = determineTheme(options);\n  var direction = theme.direction;\n  var isRtl = theme.direction === TextDirection.rtl;\n\n  function getLogicalStyle(options) {\n    var {\n      ltr,\n      rtl,\n      value\n    } = options;\n    var result = {};\n    var isProperties = Array.isArray(ltr) && Array.isArray(rtl);\n\n    if (isProperties) {\n      for (var i = 0; i < ltr.length; i += 1) {\n        var key = isRtl ? rtl[i] : ltr[i];\n        result[key] = value;\n      }\n    } else {\n      var _key = isRtl ? rtl : ltr;\n\n      result[_key] = value;\n    }\n\n    return result;\n  }\n\n  function getFourCornerValue(value) {\n    var split = toList(value);\n    var dontFlip = split.length <= 3 || split.length > 4;\n    if (dontFlip) return value;\n    var [top, right, bottom, left] = split;\n    var flippedValue = [top, left, bottom, right].join(\" \");\n    return isRtl ? flippedValue : value;\n  }\n\n  return {\n    getFourCornerValue,\n    direction,\n    getLogicalStyle\n  };\n}\n\nfunction toList(value) {\n  return value.replace(/ +/g, \" \").split(\" \").map(i => i.trim()).filter(Boolean);\n}\n\nexport default directionality;","map":{"version":3,"sources":["../../../src/utils/directionality.ts"],"names":["determineTheme","props","theme","TextDirection","direction","isRtl","value","result","isProperties","Array","i","ltr","key","rtl","split","toList","dontFlip","flippedValue","getLogicalStyle"],"mappings":"AAKA,IAAMA,cAAc,GAAIC,KAAD,IACrB,WAAA,KAAA,GAAmBA,KAAK,CAAxB,KAAA,GADF,KAAA;;AAGA,OAAO,SAAA,QAAA,CAAA,KAAA,EAA+B;AACpC,MAAMC,KAAK,GAAGF,cAAc,CAA5B,KAA4B,CAA5B;AACA,SAAOE,KAAK,CAALA,SAAAA,KAAoBC,aAAa,CAAxC,GAAA;AACD;AAED,OAAA,IAAA,aAAA;;WAAYA,a;AAAAA,EAAAA,a,OAAAA,G,KAAAA;AAAAA,EAAAA,a,OAAAA,G,KAAAA;GAAAA,a,KAAAA,a;;AAiBZ,SAAA,cAAA,CAAA,OAAA,EAA2D;AACzD,MAAMD,KAAK,GAAGF,cAAc,CAA5B,OAA4B,CAA5B;AACA,MAAMI,SAAwB,GAAGF,KAAK,CAAtC,SAAA;AACA,MAAMG,KAAc,GAAGH,KAAK,CAALA,SAAAA,KAAoBC,aAAa,CAAxD,GAAA;;AAEA,WAAA,eAAA,CAAA,OAAA,EAAyE;AACvE,QAAM;AAAA,MAAA,GAAA;AAAA,MAAA,GAAA;AAAYG,MAAAA;AAAZ,QAAN,OAAA;AACA,QAAMC,MAAM,GAAZ,EAAA;AACA,QAAMC,YAAY,GAAGC,KAAK,CAALA,OAAAA,CAAAA,GAAAA,KAAsBA,KAAK,CAALA,OAAAA,CAA3C,GAA2CA,CAA3C;;AAEA,QAAA,YAAA,EAAkB;AAChB,WAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGC,GAAG,CAAvB,MAAA,EAAgCD,CAAC,IAAjC,CAAA,EAAwC;AACtC,YAAME,GAAG,GAAGP,KAAK,GAAGQ,GAAG,CAAN,CAAM,CAAN,GAAYF,GAAG,CAAhC,CAAgC,CAAhC;AACAJ,QAAAA,MAAM,CAANA,GAAM,CAANA,GAAAA,KAAAA;AACD;AAJH,KAAA,MAKO;AACL,UAAMK,IAAG,GAAIP,KAAK,GAAA,GAAA,GAAlB,GAAA;;AACAE,MAAAA,MAAM,CAANA,IAAM,CAANA,GAAAA,KAAAA;AACD;;AACD,WAAA,MAAA;AACD;;AAED,WAAA,kBAAA,CAAA,KAAA,EAA2C;AACzC,QAAMO,KAAK,GAAGC,MAAM,CAApB,KAAoB,CAApB;AACA,QAAMC,QAAQ,GAAGF,KAAK,CAALA,MAAAA,IAAAA,CAAAA,IAAqBA,KAAK,CAALA,MAAAA,GAAtC,CAAA;AACA,QAAA,QAAA,EAAc,OAAA,KAAA;AACd,QAAM,CAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,IAAA,IAAN,KAAA;AACA,QAAMG,YAAY,GAAG,CAAA,GAAA,EAAA,IAAA,EAAA,MAAA,EAAA,KAAA,EAAA,IAAA,CAArB,GAAqB,CAArB;AACA,WAAOZ,KAAK,GAAA,YAAA,GAAZ,KAAA;AACD;;AAED,SAAO;AAAA,IAAA,kBAAA;AAAA,IAAA,SAAA;AAGLa,IAAAA;AAHK,GAAP;AAKD;;AAED,SAAA,MAAA,CAAA,KAAA,EAAyC;AACvC,SAAOZ,KAAK,CAALA,OAAAA,CAAAA,KAAAA,EAAAA,GAAAA,EAAAA,KAAAA,CAAAA,GAAAA,EAAAA,GAAAA,CAGCI,CAAD,IAAOA,CAAC,CAHRJ,IAGOI,EAHPJ,EAAAA,MAAAA,CAAP,OAAOA,CAAP;AAKD;;AAED,eAAA,cAAA","sourcesContent":["import { Dict } from \"@chakra-ui/utils\"\nimport * as CSS from \"csstype\"\n\ntype CSSProp = keyof CSS.Properties\n\nconst determineTheme = (props: Dict): Dict =>\n  \"theme\" in props ? props.theme : props\n\nexport function getIsRtl(props: Dict) {\n  const theme = determineTheme(props)\n  return theme.direction === TextDirection.rtl\n}\n\nexport enum TextDirection {\n  /**\n   * The text flows from left to right (e.g., English, French).\n   */\n  ltr = \"ltr\",\n  /**\n   * The text flows from right to left (e.g. Arabic, Hebrew).\n   */\n  rtl = \"rtl\",\n}\n\ninterface GetLogicalValue<P> {\n  ltr: P | P[]\n  rtl: P | P[]\n  value: any\n}\n\nfunction directionality<T extends Dict = Dict>(options: T) {\n  const theme = determineTheme(options) as T\n  const direction: TextDirection = theme.direction\n  const isRtl: boolean = theme.direction === TextDirection.rtl\n\n  function getLogicalStyle<P extends CSSProp>(options: GetLogicalValue<P>) {\n    const { ltr, rtl, value } = options\n    const result = {} as Record<CSSProp, string | number>\n    const isProperties = Array.isArray(ltr) && Array.isArray(rtl)\n\n    if (isProperties) {\n      for (let i = 0; i < ltr.length; i += 1) {\n        const key = isRtl ? rtl[i] : ltr[i]\n        result[key] = value\n      }\n    } else {\n      const key = (isRtl ? rtl : ltr) as P\n      result[key] = value\n    }\n    return result\n  }\n\n  function getFourCornerValue(value: string) {\n    const split = toList(value)\n    const dontFlip = split.length <= 3 || split.length > 4\n    if (dontFlip) return value\n    const [top, right, bottom, left] = split\n    const flippedValue = [top, left, bottom, right].join(\" \")\n    return isRtl ? flippedValue : value\n  }\n\n  return {\n    getFourCornerValue,\n    direction,\n    getLogicalStyle,\n  }\n}\n\nfunction toList(value: string): string[] {\n  return value\n    .replace(/ +/g, \" \")\n    .split(\" \")\n    .map((i) => i.trim())\n    .filter(Boolean)\n}\n\nexport default directionality\n"]},"metadata":{},"sourceType":"module"}