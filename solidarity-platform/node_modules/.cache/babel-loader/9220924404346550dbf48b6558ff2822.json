{"ast":null,"code":"import { createParser, system } from \"../core\";\nvar config = {\n  fontFamily: {\n    property: \"fontFamily\",\n    scale: \"fonts\"\n  },\n  fontSize: {\n    property: \"fontSize\",\n    scale: \"fontSizes\"\n  },\n  fontWeight: {\n    property: \"fontWeight\",\n    scale: \"fontWeights\"\n  },\n  lineHeight: {\n    property: \"lineHeight\",\n    scale: \"lineHeights\"\n  },\n  letterSpacing: {\n    property: \"letterSpacing\",\n    scale: \"letterSpacings\"\n  },\n  textAlign: true,\n  fontStyle: true,\n  wordBreak: true,\n  overflowWrap: true,\n  textOverflow: true,\n  textTransform: true,\n  whiteSpace: true,\n  textDecoration: true,\n  textDecor: {\n    property: \"textDecoration\"\n  }\n};\n/**\n * Types for typography related CSS properties\n */\n\nexport var typography = system(config);\nexport var typographyParser = createParser(config);","map":{"version":3,"sources":["../../../src/config/typography.ts"],"names":["config","fontFamily","property","scale","fontSize","fontWeight","lineHeight","letterSpacing","textAlign","fontStyle","wordBreak","overflowWrap","textOverflow","textTransform","whiteSpace","textDecoration","textDecor","typography","system","typographyParser","createParser"],"mappings":"AACA,SAAA,YAAA,EAAA,MAAA,QAAA,SAAA;AAGA,IAAMA,MAAc,GAAG;AACrBC,EAAAA,UAAU,EAAE;AACVC,IAAAA,QAAQ,EADE,YAAA;AAEVC,IAAAA,KAAK,EAAE;AAFG,GADS;AAKrBC,EAAAA,QAAQ,EAAE;AACRF,IAAAA,QAAQ,EADA,UAAA;AAERC,IAAAA,KAAK,EAAE;AAFC,GALW;AASrBE,EAAAA,UAAU,EAAE;AACVH,IAAAA,QAAQ,EADE,YAAA;AAEVC,IAAAA,KAAK,EAAE;AAFG,GATS;AAarBG,EAAAA,UAAU,EAAE;AACVJ,IAAAA,QAAQ,EADE,YAAA;AAEVC,IAAAA,KAAK,EAAE;AAFG,GAbS;AAiBrBI,EAAAA,aAAa,EAAE;AACbL,IAAAA,QAAQ,EADK,eAAA;AAEbC,IAAAA,KAAK,EAAE;AAFM,GAjBM;AAqBrBK,EAAAA,SAAS,EArBY,IAAA;AAsBrBC,EAAAA,SAAS,EAtBY,IAAA;AAuBrBC,EAAAA,SAAS,EAvBY,IAAA;AAwBrBC,EAAAA,YAAY,EAxBS,IAAA;AAyBrBC,EAAAA,YAAY,EAzBS,IAAA;AA0BrBC,EAAAA,aAAa,EA1BQ,IAAA;AA2BrBC,EAAAA,UAAU,EA3BW,IAAA;AA4BrBC,EAAAA,cAAc,EA5BO,IAAA;AA6BrBC,EAAAA,SAAS,EAAE;AACTd,IAAAA,QAAQ,EAAE;AADD;AA7BU,CAAvB;AAkCA;AACA;AACA;;AA6DA,OAAO,IAAMe,UAAU,GAAGC,MAAM,CAAzB,MAAyB,CAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAGC,YAAY,CAArC,MAAqC,CAArC","sourcesContent":["import * as CSS from \"csstype\"\nimport { Config, createParser, system } from \"../core\"\nimport { Token } from \"../utils\"\n\nconst config: Config = {\n  fontFamily: {\n    property: \"fontFamily\",\n    scale: \"fonts\",\n  },\n  fontSize: {\n    property: \"fontSize\",\n    scale: \"fontSizes\",\n  },\n  fontWeight: {\n    property: \"fontWeight\",\n    scale: \"fontWeights\",\n  },\n  lineHeight: {\n    property: \"lineHeight\",\n    scale: \"lineHeights\",\n  },\n  letterSpacing: {\n    property: \"letterSpacing\",\n    scale: \"letterSpacings\",\n  },\n  textAlign: true,\n  fontStyle: true,\n  wordBreak: true,\n  overflowWrap: true,\n  textOverflow: true,\n  textTransform: true,\n  whiteSpace: true,\n  textDecoration: true,\n  textDecor: {\n    property: \"textDecoration\",\n  },\n}\n\n/**\n * Types for typography related CSS properties\n */\nexport interface TypographyProps {\n  /**\n   * The CSS `font-weight` property\n   */\n  fontWeight?: Token<number | (string & {}), \"fontWeights\">\n  /**\n   * The CSS `line-height` property\n   */\n  lineHeight?: Token<CSS.Property.LineHeight | number, \"lineHeights\">\n  /**\n   * The CSS `letter-spacing` property\n   */\n  letterSpacing?: Token<CSS.Property.LetterSpacing | number, \"letterSpacings\">\n\n  /**\n   * The CSS `font-size` property\n   */\n  fontSize?: Token<CSS.Property.FontSize | number, \"fontSizes\">\n  /**\n   * The CSS `font-family` property\n   */\n  fontFamily?: Token<CSS.Property.FontFamily, \"fonts\">\n  /**\n   * The CSS `text-align` property\n   */\n  textAlign?: Token<CSS.Property.TextAlign>\n  /**\n   * The CSS `font-style` property\n   */\n  fontStyle?: Token<CSS.Property.FontStyle>\n  /**\n   * The CSS `word-break` property\n   */\n  wordBreak?: Token<CSS.Property.WordBreak>\n  /**\n   * The CSS `overflow-wrap` property\n   */\n  overflowWrap?: Token<CSS.Property.OverflowWrap>\n  /**\n   * The CSS `text-overflow` property\n   */\n  textOverflow?: Token<CSS.Property.TextOverflow>\n  /**\n   * The CSS `text-transform` property\n   */\n  textTransform?: Token<CSS.Property.TextTransform>\n  /**\n   * The CSS `white-space` property\n   */\n  whiteSpace?: Token<CSS.Property.WhiteSpace>\n  /**\n   * The CSS `text-decoration` property\n   */\n  textDecoration?: Token<CSS.Property.TextDecoration | number>\n  /**\n   * The CSS `text-decoration` property\n   */\n  textDecor?: Token<CSS.Property.TextDecoration | number>\n}\n\nexport const typography = system(config)\nexport const typographyParser = createParser(config)\n"]},"metadata":{},"sourceType":"module"}