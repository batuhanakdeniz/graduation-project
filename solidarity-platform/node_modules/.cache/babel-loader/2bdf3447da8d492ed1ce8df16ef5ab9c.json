{"ast":null,"code":"import { get, isNumber, isObject } from \"@chakra-ui/utils\";\nimport { logical } from \"./logical-prop\";\nimport { positiveOrNegative } from \"./positive-or-negative\";\nexport * from \"./positive-or-negative\";\nexport * from \"./sort\";\nexport * from \"./types\";\nexport * from \"./logical-prop\";\nexport function makeConfig(scale, transform) {\n  return prop => {\n    var result = {\n      scale\n    };\n    if (transform) result.transform = transform;\n    if (Array.isArray(prop)) result.properties = prop;else result.property = prop;\n    return result;\n  };\n}\n\nfunction fractionalValue(value, scale) {\n  var defaultValue = !isNumber(value) || value > 1 ? value : value * 100 + \"%\";\n  return get(scale, value, defaultValue);\n}\n\nexport var t = {\n  borderWidths: makeConfig(\"borderWidths\"),\n  borderStyles: makeConfig(\"borderStyles\"),\n  colors: makeConfig(\"colors\", (value, scale) => {\n    var resolvedValue = get(scale, value, value);\n    return isObject(resolvedValue) ? value : resolvedValue;\n  }),\n  borders: makeConfig(\"borders\"),\n  radii: makeConfig(\"radii\"),\n  space: makeConfig(\"space\"),\n  spaceT: makeConfig(\"space\", positiveOrNegative),\n  prop: (property, transform) => ({\n    property,\n    transform\n  }),\n  sizes: makeConfig(\"sizes\"),\n  sizesT: makeConfig(\"sizes\", fractionalValue),\n  shadows: makeConfig(\"shadows\"),\n  logical\n};","map":{"version":3,"sources":["../../../src/utils/index.ts"],"names":["prop","result","scale","Array","defaultValue","isNumber","value","get","t","borderWidths","makeConfig","borderStyles","colors","resolvedValue","isObject","borders","radii","space","spaceT","transform","sizes","sizesT","shadows","logical"],"mappings":"AAAA,SAAA,GAAA,EAAA,QAAA,EAAA,QAAA,QAAA,kBAAA;AAGA,SAAA,OAAA,QAAA,gBAAA;AACA,SAAA,kBAAA,QAAA,wBAAA;AAEA,cAAA,wBAAA;AACA,cAAA,QAAA;AACA,cAAA,SAAA;AACA,cAAA,gBAAA;AAIA,OAAO,SAAA,UAAA,CAAA,KAAA,EAAA,SAAA,EAAwE;AAC7E,SAA2BA,IAApB,IAAsC;AAC3C,QAAMC,MAAkB,GAAG;AAAEC,MAAAA;AAAF,KAA3B;AACA,QAAA,SAAA,EAAeD,MAAM,CAANA,SAAAA,GAAAA,SAAAA;AACf,QAAIE,KAAK,CAALA,OAAAA,CAAJ,IAAIA,CAAJ,EAAyBF,MAAM,CAANA,UAAAA,GAAzB,IAAyBA,CAAzB,KACKA,MAAM,CAANA,QAAAA,GAAAA,IAAAA;AACL,WAAA,MAAA;AALF,GAAA;AAOD;;AAED,SAAA,eAAA,CAAA,KAAA,EAAA,KAAA,EAAiD;AAC/C,MAAMG,YAAY,GAAG,CAACC,QAAQ,CAAT,KAAS,CAAT,IAAoBC,KAAK,GAAzB,CAAA,GAAA,KAAA,GAA2CA,KAAK,GAAhD,GAA2CA,GAAhE,GAAA;AACA,SAAOC,GAAG,CAAA,KAAA,EAAA,KAAA,EAAV,YAAU,CAAV;AACD;;AAED,OAAO,IAAMC,CAAC,GAAG;AACfC,EAAAA,YAAY,EAAEC,UAAU,CADT,cACS,CADT;AAEfC,EAAAA,YAAY,EAAED,UAAU,CAFT,cAES,CAFT;AAGfE,EAAAA,MAAM,EAAEF,UAAU,CAAA,QAAA,EAAW,CAAA,KAAA,EAAA,KAAA,KAAkB;AAC7C,QAAMG,aAAa,GAAGN,GAAG,CAAA,KAAA,EAAA,KAAA,EAAzB,KAAyB,CAAzB;AACA,WAAOO,QAAQ,CAARA,aAAQ,CAARA,GAAAA,KAAAA,GAAP,aAAA;AALa,GAGG,CAHH;AAOfC,EAAAA,OAAO,EAAEL,UAAU,CAPJ,SAOI,CAPJ;AAQfM,EAAAA,KAAK,EAAEN,UAAU,CARF,OAQE,CARF;AASfO,EAAAA,KAAK,EAAEP,UAAU,CATF,OASE,CATF;AAUfQ,EAAAA,MAAM,EAAER,UAAU,CAAA,OAAA,EAVH,kBAUG,CAVH;AAWfV,EAAAA,IAAI,EAAE,CAAA,QAAA,EAAA,SAAA,MAA6D;AAAA,IAAA,QAAA;AAEjEmB,IAAAA;AAFiE,GAA7D,CAXS;AAefC,EAAAA,KAAK,EAAEV,UAAU,CAfF,OAeE,CAfF;AAgBfW,EAAAA,MAAM,EAAEX,UAAU,CAAA,OAAA,EAhBH,eAgBG,CAhBH;AAiBfY,EAAAA,OAAO,EAAEZ,UAAU,CAjBJ,SAiBI,CAjBJ;AAkBfa,EAAAA;AAlBe,CAAV","sourcesContent":["import { get, isNumber, isObject } from \"@chakra-ui/utils\"\nimport * as CSS from \"csstype\"\nimport { PropConfig } from \"../core\"\nimport { logical } from \"./logical-prop\"\nimport { positiveOrNegative } from \"./positive-or-negative\"\n\nexport * from \"./positive-or-negative\"\nexport * from \"./sort\"\nexport * from \"./types\"\nexport * from \"./logical-prop\"\n\ntype CSSProp = keyof CSS.Properties\n\nexport function makeConfig(scale: string, transform?: PropConfig[\"transform\"]) {\n  return <T extends CSSProp>(prop: T | T[]) => {\n    const result: PropConfig = { scale }\n    if (transform) result.transform = transform\n    if (Array.isArray(prop)) result.properties = prop\n    else result.property = prop\n    return result\n  }\n}\n\nfunction fractionalValue(value: any, scale: any) {\n  const defaultValue = !isNumber(value) || value > 1 ? value : `${value * 100}%`\n  return get(scale, value, defaultValue)\n}\n\nexport const t = {\n  borderWidths: makeConfig(\"borderWidths\"),\n  borderStyles: makeConfig(\"borderStyles\"),\n  colors: makeConfig(\"colors\", (value, scale) => {\n    const resolvedValue = get(scale, value, value)\n    return isObject(resolvedValue) ? value : resolvedValue\n  }),\n  borders: makeConfig(\"borders\"),\n  radii: makeConfig(\"radii\"),\n  space: makeConfig(\"space\"),\n  spaceT: makeConfig(\"space\", positiveOrNegative),\n  prop: (property: CSSProp, transform?: PropConfig[\"transform\"]) => ({\n    property,\n    transform,\n  }),\n  sizes: makeConfig(\"sizes\"),\n  sizesT: makeConfig(\"sizes\", fractionalValue),\n  shadows: makeConfig(\"shadows\"),\n  logical,\n}\n"]},"metadata":{},"sourceType":"module"}